import{_ as l}from"./chunks/lab-2-1.BIoSFs8y.js";import{_ as p,C as h,c as o,o as r,ag as n,j as i,a,G as t}from"./chunks/framework.DS1FxSjF.js";const k="/Python-Programming/assets/lab-6-1.BqOevFaS.png",d="/Python-Programming/assets/lab-6-2.DZIa-tuq.png",f=JSON.parse('{"title":"Lab 6 - More Basic Python","description":"","frontmatter":{"outline":"deep","title":"Lab 6 - More Basic Python"},"headers":[],"relativePath":"labs/lab-06.md","filePath":"labs/lab-06.md"}'),c={name:"labs/lab-06.md"},g={id:"variables-naming-exercise",tabindex:"-1"},u={id:"string-quotes-exercise",tabindex:"-1"},y={id:"string-operations-exercise",tabindex:"-1"},E={id:"escape-characters-exercise",tabindex:"-1"};function m(F,s,b,C,v,q){const e=h("Badge");return r(),o("div",null,[s[12]||(s[12]=n('<h1 id="lab-06-more-basic-python" tabindex="-1">Lab 06 : More Basic Python <a class="header-anchor" href="#lab-06-more-basic-python" aria-label="Permalink to &quot;Lab 06 : More Basic Python&quot;">​</a></h1><h2 id="pull-and-update-in-vs-code" tabindex="-1">Pull and Update in VS Code <a class="header-anchor" href="#pull-and-update-in-vs-code" aria-label="Permalink to &quot;Pull and Update in VS Code&quot;">​</a></h2><p>Before starting any lab, you need to make sure that the repo in your <strong>GitHub</strong> is the latest one. <a href="./lab-01.html#syncing-fork">Sync the repo</a> if the <code>upstream</code> repo have been updated.</p><p>Once the online repo is in-sync, bring those changes down to your PC by clicking <code>Source Control</code> and then <code>...</code> beside <code>Changes</code> and click <code>Pull</code>.</p><p align="center"><img src="'+l+`" alt="drawing" width="400"></p><h2 id="indentation" tabindex="-1">Indentation <a class="header-anchor" href="#indentation" aria-label="Permalink to &quot;Indentation&quot;">​</a></h2><p>In pseudocode, you have been using indentation routinely when you are doing <code>if</code> and <code>while</code> statements. In Python, indentations are used exactly the same. Of course there are more indentation usage that extends further that <code>if</code> and <code>while</code> statements but that is just a reminder for the future.</p><p>In <code>exercise.py</code>, inside your <code>/lab/lab06</code> folder, try copy and paste the code below is <strong>VS code</strong>. What you do you see?</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Starting program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This line has spaces before it&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Back to normal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>VS Code</strong> will put red squiggly lines on the code to indicate something is wrong with the code. This is a main advantage of using a proper and well maintained IDE. It highlights the problems and error to use even before the code is executed.</p><p>The squiggly lines are there to tell us that the indentation is wrong.</p><p align="center"><img src="`+k+'" alt="drawing" width="600"></p><p>Now lets try to run it, what happens? You will see that the code doesnt produce the expected output. In the console, under the <strong>Problems</strong> tab, it listed all the error that our code has caused.</p><p align="center"><img src="'+d+`" alt="drawing" width="500"></p><h3 id="the-4-space-rule" tabindex="-1">The 4-Space Rule <a class="header-anchor" href="#the-4-space-rule" aria-label="Permalink to &quot;The 4-Space Rule&quot;">​</a></h3><p>Python standard convention uses 4 spaces for each level of indentation.</p><p><strong>Why 4 spaces?</strong></p><p>The answer is rather simple. 4 spaces is deep enough that the indentation level is clear but not too deep that it wastes horizontal screen space or makes code hard to read when you have multiple nested levels.</p><p><strong>VS Code</strong> helps you by automatically adding 4 spaces when you press <kbd style="color:#fff;background:#0047A3;border:1px solid #0060CC;padding:4px 10px;border-radius:6px;box-shadow:inset 0 -2px 0 rgba(0,0,0,.45),0 1px 3px rgba(0,0,0,.25);font-size:.85em;line-height:1;user-select:none;">Tab</kbd>.</p><p>Now you might wonder, what if i just decide to use 1 or 2 or something 15 spaces, would that still works?</p><p>The answer is <em><strong>kinda</strong></em>. It works but you need to be careful when choosing a different value than 4.</p><p>Copy and paste the code below into <code>exercise.py</code>.In that code, the indentation value is diffrent than 4. What do you see? Does it produce the expected output? Does the squiggly red lines in VS Code come out?</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is not 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Now try to run the code below. What do you see?</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is an additional print statement.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is not 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Bottom line is, dont use indentation if the code is on the same level and for indentation, just use <kbd style="color:#fff;background:#0047A3;border:1px solid #0060CC;padding:4px 10px;border-radius:6px;box-shadow:inset 0 -2px 0 rgba(0,0,0,.45),0 1px 3px rgba(0,0,0,.25);font-size:.85em;line-height:1;user-select:none;">Tab</kbd> button.</p><h2 id="naming-variables" tabindex="-1">Naming Variables <a class="header-anchor" href="#naming-variables" aria-label="Permalink to &quot;Naming Variables&quot;">​</a></h2><p>In Python, we use <strong>snake_case</strong> to name variables. All lowercase with underscores between words</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ali&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">total_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150.50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is_passed_exam </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">number_of_items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p>Some other language uses CamelCase to name variables.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">studentName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ali&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">totalPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150.50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isPassedExam </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numberOfItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p>So which one should we use? This is again similar as indentation, which is <strong>Python</strong> dont care, but other people do. In <strong>Python</strong>, the standard convention is to use snake_case, but if you decide to use CamelCase, the program still works, it just didnt follow the convention.</p><p>Why is it so important to follow convention? Right now you might be wondering, if both ways works that why should you care. The answer lies in your future. You will not be working alone all your life, you will be working with other classmates, collegue and others.</p><p>Having a convention is nice because your friends know what to expect from your coding style and vice versa. You also know what to expect from them.</p>`,34)),i("h3",g,[s[0]||(s[0]=a("Variables Naming Exercise ",-1)),t(e,{type:"tip",text:"Question"}),s[1]||(s[1]=a()),s[2]||(s[2]=i("a",{class:"header-anchor",href:"#variables-naming-exercise","aria-label":'Permalink to "Variables Naming Exercise <Badge type="tip" text="Question" />"'},"​",-1))]),s[13]||(s[13]=n(`<p>Create a file called <code>exercise1.py</code>. Implement the solutions for this exercise in there. Debug and fix this program with variable naming errors. Change the variable name to follow snake case</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">movie title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Avengers Endgame&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">2d_or_3d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ticket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numberoftickets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">we_ekend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hasStudentDiscount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PopcornCombo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Large&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOTAL_PRICE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 54.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customer age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">member</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#id = &quot;M1234&quot;</span></span></code></pre></div><h2 id="string-quotes-single-double-and-triple" tabindex="-1">String Quotes: Single, Double, and Triple <a class="header-anchor" href="#string-quotes-single-double-and-triple" aria-label="Permalink to &quot;String Quotes: Single, Double, and Triple&quot;">​</a></h2><p>Before we dive into string operations, let&#39;s understand the different ways to create strings in Python using different types of quotes.</p><h3 id="single-quotes-vs-double-quotes" tabindex="-1">Single Quotes vs Double Quotes <a class="header-anchor" href="#single-quotes-vs-double-quotes" aria-label="Permalink to &quot;Single Quotes vs Double Quotes&quot;">​</a></h3><p>In Python, you can use either single quotes (<code>&#39;</code>) or double quotes (<code>&quot;</code>) to create strings. Both work exactly the same way:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using single quotes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Ali&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using double quotes  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ali&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Both produce the same result</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: True</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Ali</span></span>
<span class="line"><span>Ali</span></span>
<span class="line"><span>True</span></span></code></pre></div><h3 id="when-to-use-which" tabindex="-1">When to Use Which? <a class="header-anchor" href="#when-to-use-which" aria-label="Permalink to &quot;When to Use Which?&quot;">​</a></h3><p>The choice between single and double quotes becomes important when your string contains quotes:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If your string contains single quotes, use double quotes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I can&#39;t believe it&#39;s working!&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If your string contains double quotes, use single quotes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;He said &quot;Hello there!&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message2)</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>I can&#39;t believe it&#39;s working!</span></span>
<span class="line"><span>He said &quot;Hello there!&quot;</span></span></code></pre></div><h3 id="triple-quotes" tabindex="-1">Triple Quotes <a class="header-anchor" href="#triple-quotes" aria-label="Permalink to &quot;Triple Quotes&quot;">​</a></h3><p>Triple quotes (<code>&quot;&quot;&quot;</code> or <code>&#39;&#39;&#39;</code>) are used for multi-line strings:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using triple double quotes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">long_text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;This is a long text</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">that spans multiple lines.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">You can write as many lines as you want.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(long_text)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using triple single quotes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;Roses are red,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Violets are blue,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Python is awesome,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">And so are you!&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poem)</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>This is a long text</span></span>
<span class="line"><span>that spans multiple lines.</span></span>
<span class="line"><span>You can write as many lines as you want.</span></span>
<span class="line"><span>Roses are red,</span></span>
<span class="line"><span>Violets are blue,</span></span>
<span class="line"><span>Python is awesome,</span></span>
<span class="line"><span>And so are you!</span></span></code></pre></div>`,19)),i("h3",u,[s[3]||(s[3]=a("String Quotes Exercise ",-1)),t(e,{type:"tip",text:"Task"}),s[4]||(s[4]=a()),s[5]||(s[5]=i("a",{class:"header-anchor",href:"#string-quotes-exercise","aria-label":'Permalink to "String Quotes Exercise <Badge type="tip" text="Task" />"'},"​",-1))]),s[14]||(s[14]=n(`<p>Create a file called <code>exercise2.py</code>. Write a program that demonstrates the use of all three types of quotes:</p><ol><li>Create a variable using single quotes that contains a sentence with double quotes</li><li>Create a variable using double quotes that contains a sentence with an apostrophe (single quote)</li><li>Create a multi-line string using triple quotes that contains both single and double quotes</li><li>Print all three variables</li></ol><h2 id="string-operations-and-escape-characters" tabindex="-1">String Operations and Escape Characters <a class="header-anchor" href="#string-operations-and-escape-characters" aria-label="Permalink to &quot;String Operations and Escape Characters&quot;">​</a></h2><p>There are a lot of operations that can be done on a <code>String</code>, but the operations that you will use in this class is <code>upper()</code>,<code>lower()</code> and <code>len()</code></p><h3 id="string-operations-upper-and-lower" tabindex="-1">String Operations <code>upper()</code> and <code>lower()</code> <a class="header-anchor" href="#string-operations-upper-and-lower" aria-label="Permalink to &quot;String Operations \`upper()\` and \`lower()\`&quot;">​</a></h3><p>The <code>upper()</code> and <code>lower()</code> are both methods. We don&#39;t want to dive too deep into what a method is, but essentially they are functions that belong to strings and can perform specific operations on them.</p><p>To use a method, you have to declare a <code>String</code> first and then use it on them. Execute the code below and see what is the result.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ali&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_name.upper()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(student_name)</span></span></code></pre></div><p>Why does when we <code>print(student_name)</code> the output is still <code>Ali</code>? Havent we done the <code>upper()</code> operation?</p><p>The answer is <strong>immutability</strong>. In Python, strings are immutable, which means they cannot be changed after they are created. When you call <code>student_name.upper()</code>, it doesn&#39;t change the original string. Instead, it creates and returns a new string with all letters in uppercase.</p><p>If you want to keep the uppercase version, you need to store it in a variable:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ali&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uppercase_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student_name.upper()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uppercase_name)  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(student_name)    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or you can reassign to the same variable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student_name.upper()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(student_name)</span></span></code></pre></div><h3 id="string-operations-len" tabindex="-1">String Operations <code>len()</code> <a class="header-anchor" href="#string-operations-len" aria-label="Permalink to &quot;String Operations \`len()\`&quot;">​</a></h3><p>The <code>len()</code> function returns the length of a string (how many characters it contains). Unlike <code>upper()</code> and <code>lower()</code>, <code>len()</code> is not a method - it&#39;s a built-in function that takes the string as an argument.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ali Rahman&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(student_name)) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># You can also use it directly on a string</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,15)),i("h3",y,[s[6]||(s[6]=a("String Operations Exercise ",-1)),t(e,{type:"tip",text:"Task"}),s[7]||(s[7]=a()),s[8]||(s[8]=i("a",{class:"header-anchor",href:"#string-operations-exercise","aria-label":'Permalink to "String Operations Exercise <Badge type="tip" text="Task" />"'},"​",-1))]),s[15]||(s[15]=n(`<p>Create a file called <code>exercise3.py</code>. Write a program that:</p><ol><li>Asks the user to input their full name</li><li>Displays the name in uppercase</li><li>Displays the name in lowercase</li><li>Displays the length of their name</li></ol><p>Example output:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Enter your full name: Ali Rahman</span></span>
<span class="line"><span>Uppercase: ALI RAHMAN</span></span>
<span class="line"><span>Lowercase: ali rahman</span></span>
<span class="line"><span>Name length: 10</span></span></code></pre></div><h3 id="escape-characters" tabindex="-1">Escape Characters <a class="header-anchor" href="#escape-characters" aria-label="Permalink to &quot;Escape Characters&quot;">​</a></h3><p>Escape characters are special characters in strings that are preceded by a backslash (<code>\\</code>). They allow you to include characters that would otherwise be difficult or impossible to type directly in a string.</p><p>The two most commonly used escape characters are:</p><ul><li><code>\\n</code> - Creates a new line (line break)</li><li><code>\\t</code> - Creates a tab (horizontal spacing)</li></ul><h4 id="using-n-for-new-lines" tabindex="-1">Using <code>\\n</code> for New Lines <a class="header-anchor" href="#using-n-for-new-lines" aria-label="Permalink to &quot;Using \`\\n\` for New Lines&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Without \\n - everything prints on one line</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With \\n - creates line breaks</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">World</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># You can combine \\n with regular text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Name: Ali</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Age: 20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Grade: A&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello World How are you?</span></span>
<span class="line"><span>Hello</span></span>
<span class="line"><span>World</span></span>
<span class="line"><span>How are you?</span></span>
<span class="line"><span>Name: Ali</span></span>
<span class="line"><span>Age: 20</span></span>
<span class="line"><span>Grade: A</span></span></code></pre></div><h4 id="using-t-for-tabs" tabindex="-1">Using <code>\\t</code> for Tabs <a class="header-anchor" href="#using-t-for-tabs" aria-label="Permalink to &quot;Using \`\\t\` for Tabs&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Without \\t - no spacing</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name Age Grade&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ali 20 A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With \\t - creates neat columns</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Age</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Grade&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ali</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sarah</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">19</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">B+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Name Age Grade</span></span>
<span class="line"><span>Ali 20 A</span></span>
<span class="line"><span>Name	Age	Grade</span></span>
<span class="line"><span>Ali	20	A</span></span>
<span class="line"><span>Sarah	19	B+</span></span></code></pre></div><h4 id="combining-n-and-t" tabindex="-1">Combining <code>\\n</code> and <code>\\t</code> <a class="header-anchor" href="#combining-n-and-t" aria-label="Permalink to &quot;Combining \`\\n\` and \`\\t\`&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating a formatted table</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Student Information:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Age</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Grade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Ali</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Sarah</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">19</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">B+&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(student_data)</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Student Information:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Name	Age	Grade</span></span>
<span class="line"><span>Ali	20	A</span></span>
<span class="line"><span>Sarah	19	B+</span></span></code></pre></div>`,20)),i("h3",E,[s[9]||(s[9]=a("Escape Characters Exercise ",-1)),t(e,{type:"tip",text:"Task"}),s[10]||(s[10]=a()),s[11]||(s[11]=i("a",{class:"header-anchor",href:"#escape-characters-exercise","aria-label":'Permalink to "Escape Characters Exercise <Badge type="tip" text="Task" />"'},"​",-1))]),s[16]||(s[16]=n(`<p>Create a file called <code>exercise4.py</code>. Write a program that creates a formatted receipt using <code>\\n</code> and <code>\\t</code>:</p><p>Your program should display:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>========== RECEIPT ==========</span></span>
<span class="line"><span>Item		Price	Qty	Total</span></span>
<span class="line"><span>Coffee		$3.50	2	$7.00</span></span>
<span class="line"><span>============================</span></span></code></pre></div><p>Use variables to store the item information and calculate the totals. Use <code>\\n</code> for line breaks and <code>\\t</code> for proper alignment.</p><h2 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;Comments&quot;">​</a></h2><p>There are multiple ways of doing comments in Python: single-line comments and multi-line comments. Comments are essential for writing clean, understandable code.</p><h3 id="why-use-comments" tabindex="-1">Why Use Comments? <a class="header-anchor" href="#why-use-comments" aria-label="Permalink to &quot;Why Use Comments?&quot;">​</a></h3><p>Comments serve several important purposes:</p><ul><li><strong>Explain what your code does</strong> - Help others (and future you) understand the logic</li><li><strong>Document complex algorithms</strong> - Break down complicated processes step by step</li><li><strong>Provide context</strong> - Explain why you chose a particular approach</li><li><strong>Disable code temporarily</strong> - Comment out code for testing without deleting it</li><li><strong>Add reminders</strong> - Note areas that need improvement or bug fixes</li></ul><h3 id="single-line-comments" tabindex="-1">Single-Line Comments <a class="header-anchor" href="#single-line-comments" aria-label="Permalink to &quot;Single-Line Comments&quot;">​</a></h3><p>Single-line comments in Python start with <code>#</code>. Everything after <code>#</code> on that line is ignored by Python:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is a comment - it won&#39;t run</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This comment explains what the print does</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># You can use comments to explain variables</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ali&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Store the student&#39;s name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # Student&#39;s age in years</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Comments can temporarily disable code</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># print(&quot;This line won&#39;t execute&quot;)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This line will execute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello World</span></span>
<span class="line"><span>This line will execute</span></span></code></pre></div><h3 id="multi-line-comments" tabindex="-1">Multi-Line Comments <a class="header-anchor" href="#multi-line-comments" aria-label="Permalink to &quot;Multi-Line Comments&quot;">​</a></h3><p>Python doesn&#39;t have a specific multi-line comment syntax like some languages, but there are two common approaches:</p><h4 id="method-1-multiple-lines" tabindex="-1">Method 1: Multiple <code>#</code> Lines <a class="header-anchor" href="#method-1-multiple-lines" aria-label="Permalink to &quot;Method 1: Multiple \`#\` Lines&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is a multi-line comment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># that spans several lines.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Each line needs its own # symbol.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This is the most common way.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Code after comments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="method-2-triple-quotes-docstrings" tabindex="-1">Method 2: Triple Quotes (Docstrings) <a class="header-anchor" href="#method-2-triple-quotes-docstrings" aria-label="Permalink to &quot;Method 2: Triple Quotes (Docstrings)&quot;">​</a></h4><p>Remember the triple quotes we learned in the <a href="./lab-06.html#triple-quotes">Triple Quotes</a> section? They can also be used for multi-line comments:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This is a multi-line comment using triple quotes.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">You can write multiple lines without using # on each line.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This is technically a string, but if it&#39;s not assigned to a variable,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Python ignores it, making it act like a comment.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Code after triple quote comment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">You can also use triple single quotes</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">for multi-line comments.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Both work the same way.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span></code></pre></div><p><strong>Output:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Code after comments</span></span>
<span class="line"><span>Code after triple quote comment</span></span></code></pre></div><h3 id="best-practices-for-comments" tabindex="-1">Best Practices for Comments <a class="header-anchor" href="#best-practices-for-comments" aria-label="Permalink to &quot;Best Practices for Comments&quot;">​</a></h3><ol><li><strong>Write clear, concise comments</strong> - Explain the &quot;why&quot;, not just the &quot;what&quot;</li><li><strong>Keep comments up to date</strong> - Update comments when you change code</li><li><strong>Don&#39;t over-comment</strong> - Don&#39;t explain obvious things</li><li><strong>Use proper grammar and spelling</strong> - Comments are read by humans</li></ol>`,25))])}const w=p(c,[["render",m]]);export{f as __pageData,w as default};

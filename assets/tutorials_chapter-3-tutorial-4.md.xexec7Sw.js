import{_ as n,C as o,c as l,o as d,j as e,ag as i,a,G as s}from"./chunks/framework.DS1FxSjF.js";const q=JSON.parse('{"title":"Chapter 3 - Tutorial 4","description":"","frontmatter":{"title":"Chapter 3 - Tutorial 4","outline":"deep"},"headers":[],"relativePath":"tutorials/chapter-3-tutorial-4.md","filePath":"tutorials/chapter-3-tutorial-4.md"}'),p={name:"tutorials/chapter-3-tutorial-4.md"},c={id:"creating-the-ipo-table",tabindex:"-1"},u={id:"creating-the-flowchart",tabindex:"-1"},h={id:"exercise-1-run-length-encoding",tabindex:"-1"},m={id:"exercise-2-checksum-validation",tabindex:"-1"},g={id:"exercise-3-caesar-cipher",tabindex:"-1"},b={id:"exercise-4-simple-hash-function",tabindex:"-1"};function f(y,t,T,x,v,C){const r=o("Badge");return d(),l("div",null,[t[18]||(t[18]=e("h1",{id:"chapter-3-tutorial-4",tabindex:"-1"},[a("Chapter 3 - Tutorial 4 "),e("a",{class:"header-anchor",href:"#chapter-3-tutorial-4","aria-label":'Permalink to "Chapter 3 - Tutorial 4"'},"​")],-1)),e("h2",c,[t[0]||(t[0]=a("Creating The IPO Table ",-1)),s(r,{type:"warning",text:"Recall"}),t[1]||(t[1]=a()),t[2]||(t[2]=e("a",{class:"header-anchor",href:"#creating-the-ipo-table","aria-label":'Permalink to "Creating The IPO Table <Badge type="warning" text="Recall" />"'},"​",-1))]),t[19]||(t[19]=i('<table tabindex="0"><thead><tr><th>Phase</th><th>Practical Meaning</th><th>Typical Keywords (in the problem text)</th></tr></thead><tbody><tr><td><strong>Input</strong></td><td>Data accepted from the user  always <em>nouns</em>, never actions. <strong>NEVER USE VERB.</strong> <br><br>Suggested structure: <br><br> <strong>Counter-controlled</strong> : input_name for x times <br> <strong>Sentinel</strong> : input_name for x times until condition is true</td><td>enter, read, get</td></tr><tr><td><strong>Process</strong></td><td>Operations applied to the inputs  arithmetic, decisions, loops. Each item should begin with a <strong>verb</strong>.<br><br> The suggested structure for <strong>repetition</strong> question is: <br><br> Counter-controlled : repeat VERB + OUTPUT + BASED ON INPUT AND CONSTANT for x times <br><br> Sentinel : repeat VERB + OUTPUT + BASED ON INPUT AND CONSTANT for x times until condition is true</td><td>calculate, compute, determine, if, while, repeat</td></tr><tr><td><strong>Output</strong></td><td>The result delivered to the user or another system  again <em>nouns</em> or messages. <strong>NEVER USE VERB.</strong> <br><br>Suggested structure: <br><br> input_name for x times (if necessary) <br><br> or <br><br> input_name for x times until condition is true (if necessary)</td><td>display, print, show</td></tr></tbody></table>',1)),e("h2",u,[t[3]||(t[3]=a("Creating The Flowchart ",-1)),s(r,{type:"warning",text:"Recall"}),t[4]||(t[4]=a()),t[5]||(t[5]=e("a",{class:"header-anchor",href:"#creating-the-flowchart","aria-label":'Permalink to "Creating The Flowchart <Badge type="warning" text="Recall" />"'},"​",-1))]),t[20]||(t[20]=i('<table tabindex="0"><thead><tr><th>Shape</th><th>Usage</th><th>Tips</th></tr></thead><tbody><tr><td>Oval</td><td>Start/End</td><td>All shapes are required to be connected with arrows; be aware of the direction</td></tr><tr><td>Rectangle</td><td>Process</td><td>All processes are assignment operations (=)</td></tr><tr><td>Diamond</td><td>Decision/Selection</td><td>All decisions must be evaluated to <code>True</code> or <code>False</code></td></tr><tr><td>Parallelogram</td><td>Input/Output</td><td>Place Input shapes at the beginning, Output shapes at the end</td></tr></tbody></table><hr><h2 id="real-life-algorithm" tabindex="-1">Real Life Algorithm <a class="header-anchor" href="#real-life-algorithm" aria-label="Permalink to &quot;Real Life Algorithm&quot;">​</a></h2>',3)),e("h3",h,[t[6]||(t[6]=a("Exercise 1 - Run-Length Encoding ",-1)),s(r,{type:"tip",text:"Question"}),t[7]||(t[7]=a()),t[8]||(t[8]=e("a",{class:"header-anchor",href:"#exercise-1-run-length-encoding","aria-label":'Permalink to "Exercise 1 - Run-Length Encoding <Badge type="tip" text="Question" />"'},"​",-1))]),t[21]||(t[21]=i('<p>Compression algorithms are fundamental to modern digital systems, reducing file sizes by 50-90% in applications such as ZIP archives, video streaming platforms, and messaging services. Without compression, multimedia content would require significantly more storage space and transmission time.</p><p><strong>What is Data Compression?</strong></p><p>Data compression reduces file sizes by identifying and eliminating redundancy. Consider storing repeated characters: instead of storing &quot;aaabbc&quot; as six separate characters, we can represent it more efficiently as &quot;a3b2c1&quot; - indicating 3 a&#39;s, 2 b&#39;s, and 1 c.</p><p>Run-Length Encoding operates on this principle by identifying sequences of repeated characters. The string &quot;aaabbc&quot; can be compressed to &quot;a3b2c1&quot;, where each character is followed by its consecutive count.</p><p><strong>Compression Efficiency Note:</strong></p><p>The simple example &quot;aaabbc&quot; (6 characters) produces &quot;a3b2c1&quot; (6 characters), showing no space savings. However, compression effectiveness increases with repetition. For instance, &quot;aaaaaaaaaaaaaaaaaaaabbbbbbbbbbcccccccc&quot; (40 characters) compresses to &quot;a20b10c8&quot; (8 characters), achieving an 80% reduction.</p><p>Real compression algorithms are much more sophisticated and can compress almost any type of data efficiently.</p><p><strong>Problem:</strong></p><p>Implement a run-length encoding algorithm that processes characters sequentially and counts consecutive identical characters.</p><ul><li><p><strong>Input:</strong> Characters entered one by one and will end when # is entered</p></li><li><p><strong>Output:</strong> Compressed string representation</p></li></ul><p><strong>Example:</strong></p><p>Input characters: a, a, a, b, b, c → Output: a3b2c1</p><details class="details custom-block"><summary>Click for clue</summary><p>Use a variable to keep track of the current character and another variable to count how many times it appears consecutively.</p></details>',13)),e("h3",m,[t[9]||(t[9]=a("Exercise 2 - Checksum Validation ",-1)),s(r,{type:"tip",text:"Question"}),t[10]||(t[10]=a()),t[11]||(t[11]=e("a",{class:"header-anchor",href:"#exercise-2-checksum-validation","aria-label":'Permalink to "Exercise 2 - Checksum Validation <Badge type="tip" text="Question" />"'},"​",-1))]),t[22]||(t[22]=i("<p>Checksums are embedded in various identification systems including credit card numbers, ISBN codes, and barcodes to detect data corruption. These algorithms prevent processing errors that could result from transmission or input mistakes.</p><p><strong>What is a Checksum?</strong></p><p>A checksum is a computed value derived from input data using mathematical algorithms designed to detect errors in transmission or storage. Discrepancies between computed and expected checksum values indicate potential data corruption.</p><p><strong>Practical Applications:</strong></p><ul><li>Credit card numbers incorporate checksum digits that validate the entire number sequence according to established algorithms (such as the Luhn algorithm).</li><li>ISBN codes employ checksum validation to ensure number authenticity and prevent arbitrary number generation.</li><li>WiFi passwords, QR codes, and even DNA sequencing use checksum algorithms to detect errors</li></ul><p>Checksum algorithms can identify various error types including single-digit substitutions, transposition errors, and other common data corruption patterns, establishing their importance in data integrity systems.</p><p><strong>Problem:</strong> Implement a checksum validation algorithm that computes the sum of all digits and verifies divisibility by 10.</p><p><strong>Input:</strong> Digits entered one by one, until negative number is entered</p><p><strong>Output:</strong> &quot;Valid&quot; if divisible by 10, &quot;Invalid&quot; otherwise</p><p><strong>Example:</strong> For digits 1, 2, 3, 4: sum = 10, 10 % 10 = 0 remainder, so output &quot;Valid&quot;</p>",10)),e("h3",g,[t[12]||(t[12]=a("Exercise 3 - Caesar Cipher ",-1)),s(r,{type:"tip",text:"Question"}),t[13]||(t[13]=a()),t[14]||(t[14]=e("a",{class:"header-anchor",href:"#exercise-3-caesar-cipher","aria-label":'Permalink to "Exercise 3 - Caesar Cipher <Badge type="tip" text="Question" />"'},"​",-1))]),t[23]||(t[23]=i('<p>Secure communication protocols (HTTPS), messaging applications, and e-commerce platforms rely on encryption algorithms significantly more complex than basic ciphers. Modern cryptographic systems are designed to resist computational attacks even with substantial computing resources.</p><p><strong>What is Encryption?</strong></p><p>Encryption converts plaintext into ciphertext through systematic transformation algorithms. The Caesar Cipher exemplifies this concept through alphabetic substitution, where each letter shifts by a fixed number of positions (e.g., &quot;HELLO&quot; becomes &quot;KHOOR&quot; with a shift of 3).</p><p>The Caesar Cipher, historically attributed to Julius Caesar for military communications, operates through systematic alphabetic shifting. With a shift value of 1:</p><ul><li>a becomes b (a + 1 = b)</li><li>b becomes c (b + 1 = c)</li><li>d becomes a (d + 1 wraps around to a)</li></ul><p>Modern encryption algorithms employ mathematical complexity designed to make brute-force attacks computationally impossible without the corresponding decryption key.</p><p><strong>Problem:</strong> Implement a Caesar Cipher encryption algorithm for letters a-d only that shifts each letter by a specified amount, wrapping around within the a-d range.</p><p><strong>Input:</strong> Shift amount and characters (a-d only) entered one by one, until # is entered</p><p><strong>Output:</strong> Encrypted message</p><p><strong>Example:</strong> With shift = 1, input: a, b, c, d → Output: bcda</p><details class="details custom-block"><summary>Click for clue</summary><p>Map letters to numbers (a=1, b=2, c=3, d=4), add the shift value, then convert back to letters. Don&#39;t forget to wrap around when you reach the end (after d, go back to a).</p></details>',11)),e("h3",b,[t[15]||(t[15]=a("Exercise 4 - Simple Hash Function ",-1)),s(r,{type:"tip",text:"Question"}),t[16]||(t[16]=a()),t[17]||(t[17]=e("a",{class:"header-anchor",href:"#exercise-4-simple-hash-function","aria-label":'Permalink to "Exercise 4 - Simple Hash Function <Badge type="tip" text="Question" />"'},"​",-1))]),t[24]||(t[24]=i('<p><strong>Hash Function Applications:</strong> Cryptographic hash functions serve as fundamental components in blockchain technologies, search engine indexing systems, and secure password storage mechanisms. These functions enable data integrity verification and efficient information retrieval across large datasets.</p><p><strong>What is Hashing?</strong> A hash function converts input data of any size into a fixed-size string of characters, creating a unique &quot;digital fingerprint&quot; for that data. This fingerprint is deterministic - the same input always produces the same hash value.</p><p>The amazing properties of hash functions:</p><ul><li>The same input ALWAYS produces the same hash</li><li>Even changing one tiny character completely changes the hash</li><li>They are designed to be computationally irreversible</li><li>&quot;ab&quot; might become 5, but &quot;ba&quot; (different order) might become 8</li></ul><p><strong>What is Letter-to-Number Mapping?</strong> Instead of complex ASCII values, we can use simple letter-to-number mapping for basic calculations:</p><table tabindex="0"><thead><tr><th>Character</th><th>Number Value</th></tr></thead><tbody><tr><td>a</td><td>1</td></tr><tr><td>b</td><td>2</td></tr><tr><td>c</td><td>3</td></tr><tr><td>d</td><td>4</td></tr></tbody></table><p><strong>Problem:</strong> Implement a hash function that converts characters (a-d only) to their number values (a=1, b=2, c=3, d=4), multiplies each by its position, and computes the cumulative sum.</p><p><strong>Input:</strong> Characters (a-d only) entered one by one, until # is entered</p><p><strong>Output:</strong> Final hash value</p><p><strong>Example:</strong> For input &quot;ab&quot;: (1 × 1) + (2 × 2) = 1 + 4 = 5</p><details class="details custom-block"><summary>Click for clue</summary><p>Keep track of the position counter and use simple selection statements to map a=1, b=2, c=3, d=4. Multiply each value by its position before adding to the sum.</p></details>',11))])}const E=n(p,[["render",f]]);export{q as __pageData,E as default};
